version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: celebratedb
      POSTGRES_USER: celebrate
      POSTGRES_PASSWORD: celebrate123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./setup_tables.sql:/docker-entrypoint-initdb.d/setup_tables.sql
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U celebrate -d celebratedb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    container_name: service-registry
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservices-net
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - microservices-net
    depends_on:
      service-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Business Services
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
    networks:
      - microservices-net
    depends_on:
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  post-service:
    build:
      context: ./post-service
      dockerfile: Dockerfile
    container_name: post-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  messaging-service:
    build:
      context: ./messaging-service
      dockerfile: Dockerfile
    container_name: messaging-service
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  news-feed-service:
    build:
      context: ./news-feed-service
      dockerfile: Dockerfile
    container_name: news-feed-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analytics-logging-service:
    build:
      context: ./analytics-logging-service
      dockerfile: Dockerfile
    container_name: analytics-logging-service
    ports:
      - "8088:8088"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  monitoring-service:
    build:
      context: ./monitoring-service
      dockerfile: Dockerfile
    container_name: monitoring-service
    ports:
      - "8089:8089"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  award-service:
    build:
      context: ./award-service
      dockerfile: Dockerfile
    container_name: award-service
    ports:
      - "8091:8091"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  moderation-service:
    build:
      context: ./moderation-service
      dockerfile: Dockerfile
    container_name: moderation-service
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rating-review-service:
    build:
      context: ./rating-review-service
      dockerfile: Dockerfile
    container_name: rating-review-service
    ports:
      - "8093:8093"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    container_name: search-service
    ports:
      - "8094:8094"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_LOCATION: optional:configserver:http://config-server:8888/
      SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/celebratedb
      SPRING_DATASOURCE_USERNAME: celebrate
      SPRING_DATASOURCE_PASSWORD: celebrate123
    networks:
      - microservices-net
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      service-registry:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  microservices-net:
    driver: bridge 